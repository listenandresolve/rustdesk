name: Build the flutter version of the RustDesk

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"
        
env:
  SCITER_RUST_VERSION: "1.75" # https://github.com/rustdesk/rustdesk/discussions/7503, also 1.78 has ABI change which causes our sciter version not working, https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  RUST_VERSION: "1.75" # sciter failed on m1 with 1.78 because of https://blog.rust-lang.org/2024/03/30/i128-layout-update.html
  MAC_RUST_VERSION: "1.81" # 1.81 is requred for macos, because of https://github.com/yury/cidre requires 1.81
  CARGO_NDK_VERSION: "3.1.2"
  SCITER_ARMV7_CMAKE_VERSION: "3.29.7"
  SCITER_NASM_DEBVERSION: "2.15.05-1"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.24.5"
  ANDROID_FLUTTER_VERSION: "3.24.5"
  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.16.9"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2025.08.27
  # If we change the `VCPKG COMMIT_ID`, please remember:
  # 1. Call `$VCPKG_ROOT/vcpkg x-update-baseline` to update the baseline in `vcpkg.json`.
  #  Or we may face build issue like 
  #  https://github.com/rustdesk/rustdesk/actions/runs/14414119794/job/40427970174
  # 2. Update the `VCPKG_COMMIT_ID` in `ci.yml` and `playground.yml`.
  VCPKG_COMMIT_ID: "120deac3062162151622ca4860575a33844ba10b"
  ARMV7_VCPKG_COMMIT_ID: "6f29f12e82a8293156836ad81cc9bf5af41fe836" # 2025.01.13, got "/opt/artifacts/vcpkg/vcpkg: No such file or directory" with latest version
  VERSION: "1.4.3"
  NDK_VERSION: "r27c"
  #signing keys env variable checks
  MACOS_P12_BASE64: "${{ secrets.MACOS_P12_BASE64 }}"
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"
  SIGN_BASE_URL: "${{ secrets.SIGN_BASE_URL }}"

jobs:
  generate-bridge:
    uses: ./.github/workflows/bridge.yml

  build-RustDeskTempTopMostWindow:
    uses: ./.github/workflows/third-party-RustDeskTempTopMostWindow.yml
    with:
      upload-artifact: ${{ inputs.upload-artifact }}
      target: windows-2022
      configuration: Release
      platform: x64
      target_version: Windows10
    strategy:
      fail-fast: false

  build-for-windows-flutter:
    name: ${{ matrix.job.target }}
    needs: [build-RustDeskTempTopMostWindow, generate-bridge]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # - { target: i686-pc-windows-msvc        , os: windows-2022                  }
          # - { target: x86_64-pc-windows-gnu       , os: windows-2022                  }
          - {
              target: x86_64-pc-windows-msvc,
              os: windows-2022,
              arch: x86_64,
              vcpkg-triplet: x64-windows-static,
            }
          # - { target: aarch64-pc-windows-msvc, os: windows-2022, arch: aarch64 }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

#=====# CUSTOMIZATION LISTEN AND RESOLVE (WINDOWS)
      - name: CUSTOMIZATION CLIENT LISTEN AND RESOLVE (Windows)
        env:
          RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
          API_SERVER: "${{ secrets.API_SERVER }}"
          RS_PUB_KEY: ${{ secrets.RS_PUB_KEY }}
          RS_PWD: ${{ secrets.RS_PWD }}
        shell: bash
        run: |
          # ========================================
          # T√©l√©charger le PNG avec options SSL
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./res/icon.png \
            https://listenandresolve.com/rustdesk/icon.png; then
            wget --no-check-certificate -O ./res/icon.png \
              https://listenandresolve.com/rustdesk/icon.png || echo "‚ö†Ô∏è  √âchec t√©l√©chargement PNG"
          fi
          # T√©l√©charger le logo placeholder
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./flutter/assets/logo.png \
            https://listenandresolve.com/rustdesk/logo.png; then
            wget --no-check-certificate -O ./flutter/assets/logo.png \
              https://listenandresolve.com/rustdesk/icon.png || echo "‚ö†Ô∏è  √âchec t√©l√©chargement PNG"
          fi

          # ========================================
          # Cr√©er toutes les tailles d'ic√¥nes n√©cessaires
          echo -n "üü† Cr√©ation des icones..."
          magick ./res/icon.png -define icon:auto-resize=256,64,48,32,16 ./res/icon.ico
          cp ./res/icon.ico ./res/tray-icon.ico
          cp ./res/icon.ico ./flutter/windows/runner/resources/app-icon.ico
          magick ./res/icon.png -resize 32x32 ./res/32x32.png
          magick ./res/icon.png -resize 64x64 ./res/64x64.png
          magick ./res/icon.png -resize 128x128 ./res/128x128.png
          magick ./res/128x128.png -resize 200% ./res/128x128@2x.png
          echo -e "\rüü¢ Cr√©ation des icones... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Copier l'ic√¥ne aux autres emplacements requis
          echo -n "üü† Copie des icones..."
          cp ./res/icon.ico flutter/windows/runner/resources/app-icon.ico

          # ========================================
          # Modifier le fichier ui.rs pour remplacer l'ic√¥ne int√©gr√©e en base64
          SEARCH_STR="iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAEiuAABIrgHwmhA7AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAEx9JREFUeJztnXmYHMV5h9"
          b64=$(base64 < ./res/icon.png | tr -d '\n')
          sed -i -e "s~$SEARCH_STR.*\"~$b64\"~" ./src/ui.rs
          echo -e "\rüü¢ Copie des icones... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Modification de flutter/lib/common.dart
          echo "üü† Ajout du logo Listen and Resolve..."
          # Cr√©ation d'un fichier temporaire contenant le nouveau code
          cat > /tmp/new_logo_function.txt << 'EOF'
          Widget loadLogo() {
            return Container(
              width: 300,
              height: 100,
              margin: EdgeInsets.only(left: 12, right: 12, top: 12),
              child: FadeInImage.assetNetwork(
                placeholder: 'assets/logo.png', // Placeholder image while loading
                image: 'https://listenandresolve.com/rustdesk/client.gif', // URL of the logo
                fit: BoxFit.contain,
                imageErrorBuilder: (context, error, stackTrace) {
                  return Container(); // Handle image loading error
                },
              ),
            );
          }
          EOF
          
          # Suppression de l'ancienne fonction et insertion de la nouvelle
          awk '
          BEGIN { printing = 1 }
          /Widget loadLogo\(\) \{/ { printing = 0; system("cat /tmp/new_logo_function.txt"); }
          /^}$/ && printing == 0 { printing = 1; next; }
          printing == 1 { print }
          ' flutter/lib/common.dart > flutter/lib/common.dart.new
          
          # Remplacement du fichier original
          mv flutter/lib/common.dart.new flutter/lib/common.dart
          echo -e "\rüü¢ Ajout du logo... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Ajout du bouton d'installation daemon + ID rouge
          echo -n "üü† Cr√©ation du bouton d'installation..."
          
          # Cr√©ation du fichier temporaire avec la nouvelle m√©thode buildDaemonInstallButton
          cat > /tmp/daemon_button_method.txt << 'EOF'
            Widget LNRGotoInstallButton(BuildContext context) {
              final textColor = Theme.of(context).textTheme.titleLarge?.color;
              RxBool hover = false.obs;
              return InkWell(
                onTap: () async {
                  // Fermer toutes les fen√™tres et lancer l'installation
                  await rustDeskWinManager.closeAllSubWindows();
                  bind.mainGotoInstall();
                },
                child: Tooltip(
                  message: translate('Installer sur le PC'),
                  child: Obx(
                    () => CircleAvatar(
                      radius: 15,
                      backgroundColor: hover.value
                          ? Theme.of(context).scaffoldBackgroundColor
                          : Theme.of(context).colorScheme.background,
                      child: Icon(
                        Icons.install_desktop,
                        size: 18,
                        color: hover.value 
                            ? textColor 
                            : textColor?.withOpacity(0.5),
                      ),
                    ),
                  ),
                ),
                onHover: (value) => hover.value = value,
              );
            }
          EOF
          
          # Ajout de la m√©thode buildDaemonInstallButton apr√®s buildPopupMenu
          awk '
          /Widget buildPopupMenu\(BuildContext context\) \{/,/^  \}$/ {
              print
              if (/^  \}$/) {
                  system("cat /tmp/daemon_button_method.txt")
              }
              next
          } { print }
          ' flutter/lib/desktop/pages/desktop_home_page.dart > /tmp/desktop_home_page_temp.dart
          
          # Remplacement de buildPopupMenu(context) par le Row avec les deux boutons dans buildIDBoard
          sed -i 's/buildPopupMenu(context)/Row(\
                                    mainAxisSize: MainAxisSize.min,\
                                    children: [\
                                      LNRGotoInstallButton(context),\
                                      SizedBox(width: 0),\
                                      buildPopupMenu(context),\
                                    ],\
                                  )/g' /tmp/desktop_home_page_temp.dart
          
          # Modification du style de l'ID
          sed -i 's/fontSize: 22,/fontSize: 24,\
                          color: Colors.red,/g' /tmp/desktop_home_page_temp.dart
          
          # Remplacement du fichier original
          mv /tmp/desktop_home_page_temp.dart flutter/lib/desktop/pages/desktop_home_page.dart
          
          # Nettoyage des fichiers temporaires
          rm -f /tmp/daemon_button_method.txt /tmp/new_logo_function.txt
          
          echo -e "\rüü¢ Cr√©ation du bouton d'installation... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Modifier libs/hbb_common/src/config.rs
          echo -n "üü† Configuration du serveur..."
          sed -i -e "s|rs-ny.rustdesk.com|${RENDEZVOUS_SERVER}|g" ./libs/hbb_common/src/config.rs
          sed -i -e "s|OeVuKk5nlHiXp+APNn0Y3pC1Iwpwn44JGqrQCsWqmBw=|${RS_PUB_KEY}|g" ./libs/hbb_common/src/config.rs
          echo -e "\rüü¢ Configuration du serveur... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Overwrite Settings..."
          cat << 'EOF' > overwritesettings.txt
              pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("api-server".to_string(), "https://rd.listenandresolve.com".to_string());
                  m.insert("access-mode".to_string(), "full".to_string());
                  m.insert("allow-remote-config-modification".to_string(), "Y".to_string());
                  m.insert("allow-remove-wallpaper".to_string(), "Y".to_string());
                  m.insert("allow-remote-cm-modification".to_string(), "Y".to_string());
                  m.insert("allow-numeric-one-time-password".to_string(), "Y".to_string());
                  m.insert("allow-websocket".to_string(), "Y".to_string());
                  m.insert("enable-remote-restart".to_string(), "Y".to_string());
                  m.insert("enable-file-copy-paste".to_string(), "Y".to_string());
                  m.insert("enable-remote-printer".to_string(), "N".to_string());
                  RwLock::new(m)
              };
          EOF
          
          sed -i '/pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r overwritesettings.txt' ./libs/hbb_common/src/config.rs
          sed -i '/pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          echo -e "\rüü¢ Configuration des Overwrite Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Builtin Settings..."
          cat << 'EOF' > builtinsettings.txt
              pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("allow-logon-screen-password".to_string(), "Y".to_string());
                  m.insert("allow-https-21114".to_string(), "Y".to_string());
                  m.insert("hide-help-cards".to_string(), "Y".to_string());
                  RwLock::new(m)
              };
          EOF
          
          sed -i '/pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r builtinsettings.txt' ./libs/hbb_common/src/config.rs
          sed -i '/pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          echo -e "\rüü¢ Configuration des Builtin Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Hard Settings..."
          sed -i 's/"doc_mac_permission", ".*"/"doc_mac_permission", "https:\/\/listenandresolve.com\/rustdesk"/' src/lang/en.rs
          cat << 'EOF' > hardsettings.txt
              pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("conn-type".to_string(), "incoming".to_string());
                  m.insert("force-always-relay".to_string(), "Y".to_string());
                  m.insert("disable-settings".to_string(), "Y".to_string());
                  m.insert("disable-account".to_string(), "Y".to_string());
                  m.insert("disable-installation".to_string(), "Y".to_string());
                  m.insert("password".to_string(), "__PASSWORD_PLACEHOLDER__".to_string());
                  RwLock::new(m)
              };
          EOF
          sed -i "s/__PASSWORD_PLACEHOLDER__/${RS_PWD}/g" hardsettings.txt
          sed -i '/pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r hardsettings.txt' ./libs/hbb_common/src/config.rs
          sed -i '/pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          echo -e "\rüü¢ Configuration des Hard Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le nom de l'entreprise
          echo -n "üü† Configuration entreprise..."
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./flutter/lib/desktop/pages/desktop_setting_page.dart
          sed -i -e 's|PURSLANE|LISTEN AND RESOLVE|' ./res/msi/preprocess.py
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./res/msi/preprocess.py
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./flutter/windows/runner/Runner.rc
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./flutter/windows/runner/Runner.rc
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./Cargo.toml
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./libs/portable/Cargo.toml
          sed -i -e 's|Purslane Ltd|Listen and Resolve|' ./src/ui/index.tis
          # Modifier le nom du dossier dans APPDATA (pour √©viter conflits avec la version officielle)
          sed -i -e 's/&APP_NAME\.read()\.unwrap()/"RustDeskLNR"/g' ./libs/hbb_common/src/config.rs
          echo -e "\rüü¢ Configuration entreprise... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier les URL
          echo -n "üü† Configuration des URL..."
          sed -i -e "s|Homepage: https://rustdesk.com|Homepage: https://listenandresolve.com|" ./build.py
          sed -i -e "s|launchUrl(Uri.parse('https://rustdesk.com'));|launchUrl(Uri.parse('https://listenandresolve.com'));|" ./flutter/lib/common.dart
          sed -i -e "s|launchUrlString('https://rustdesk.com');|launchUrlString('https://listenandresolve.com');|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          sed -i -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('https://listenandresolve.com/rustdesk')|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          sed -i -e "s|const url = 'https://rustdesk.com/';|const url = 'https://listenandresolve.com';|" ./flutter/lib/mobile/pages/settings_page.dart
          sed -i -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('https://listenandresolve.com/rustdesk')|" ./flutter/lib/mobile/pages/settings_page.dart
          sed -i -e "s|https://rustdesk.com/privacy.html|https://listenandresolve.com/rustdesk|" ./flutter/lib/desktop/pages/install_page.dart
          echo -e "\rüü¢ Configuration des URL... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
#=====# CUSTOMIZATION LISTEN AND RESOLVE (WINDOWS)

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: ${{ env.LLVM_VERSION }}

      - name: Install flutter
        uses: subosito/flutter-action@v2.12.0 #https://github.com/subosito/flutter-action/issues/277
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # https://github.com/flutter/flutter/issues/155685
      - name: Replace engine with rustdesk custom flutter engine
        run: |
          flutter doctor -v
          flutter precache --windows
          Invoke-WebRequest -Uri https://github.com/rustdesk/engine/releases/download/main/windows-x64-release.zip -OutFile windows-x64-release.zip
          Expand-Archive -Path windows-x64-release.zip -DestinationPath windows-x64-release
          mv -Force windows-x64-release/* ¬†C:/hostedtoolcache/windows/flutter/stable-${{ env.FLUTTER_VERSION }}-x64/bin/cache/artifacts/engine/windows-x64-release/

      - name: Patch flutter
        shell: bash
        run: |
          cp .github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff $(dirname $(dirname $(which flutter)))
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{env.FLUTTER_VERSION}} ]] && git apply flutter_3.24.4_dropdown_menu_enableFilter.diff
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.SCITER_RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: C:\vcpkg
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        env:
          VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.job.vcpkg-triplet }}
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --triplet ${{ matrix.job.vcpkg-triplet }} \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true
        shell: bash

      - name: replace flutter icons
        continue-on-error: true
        run: |
          cd ./flutter
          flutter pub get
          flutter pub run flutter_launcher_icons
          cd ..

      - name: Build rustdesk
        run: |
          # Windows: build RustDesk
          python3 .\build.py --portable --hwcodec --flutter --vram --skip-portable-pack
          mv ./flutter/build/windows/x64/runner/Release ./rustdesk

          # Download usbmmidd_v2.zip and extract it to ./rustdesk
          Invoke-WebRequest -Uri https://github.com/rustdesk-org/rdev/releases/download/usbmmidd_v2/usbmmidd_v2.zip -OutFile usbmmidd_v2.zip
          Expand-Archive usbmmidd_v2.zip -DestinationPath .
          Remove-Item -Path usbmmidd_v2\Win32 -Recurse
          Remove-Item -Path "usbmmidd_v2\deviceinstaller64.exe", "usbmmidd_v2\deviceinstaller.exe", "usbmmidd_v2\usbmmidd.bat"
          mv -Force .\usbmmidd_v2 ./rustdesk

          # Download printer driver files and extract them to ./rustdesk
          try {
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/rustdesk_printer_driver_v4.zip -OutFile rustdesk_printer_driver_v4.zip
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/printer_driver_adapter.zip -OutFile printer_driver_adapter.zip
            Invoke-WebRequest -Uri https://github.com/rustdesk/hbb_common/releases/download/driver/sha256sums -OutFile sha256sums

            # Check and move the files
            $checksum_driver = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*rustdesk_printer_driver_v4\.zip$').Matches.Groups[1].Value
            $downloadsum_driver = Get-FileHash -Path rustdesk_printer_driver_v4.zip -Algorithm SHA256
            $checksum_dll = (Select-String -Path .\sha256sums -Pattern '^([a-fA-F0-9]{64}) \*printer_driver_adapter\.zip$').Matches.Groups[1].Value
            $downloadsum_dll = Get-FileHash -Path printer_driver_adapter.zip -Algorithm SHA256
            if ($checksum_driver -eq $downloadsum_driver.Hash -and $checksum_dll -eq $downloadsum_dll.Hash) {
                Write-Output "rustdesk_printer_driver_v4, checksums match, extract the file."
                Expand-Archive rustdesk_printer_driver_v4.zip -DestinationPath .
                mkdir ./rustdesk/drivers
                mv -Force .\rustdesk_printer_driver_v4 ./rustdesk/drivers/RustDeskPrinterDriver
                Expand-Archive printer_driver_adapter.zip -DestinationPath .
                mv -Force .\printer_driver_adapter.dll ./rustdesk
            } elseif ($checksum_driver -ne $downloadsum_driver.Hash) {
                Write-Output "rustdesk_printer_driver_v4, checksums do not match, ignore the file."
            } else {
                Write-Output "printer_driver_adapter.dll, checksums do not match, ignore the file."
            }
          } catch {
              Write-Host "Ingore the printer driver error."
          }

      - name: find Runner.res
        # Windows: find Runner.res (compiled from ./flutter/windows/runner/Runner.rc), copy to ./Runner.res
        # Runner.rc does not contain actual version, but Runner.res does
        continue-on-error: true
        shell: bash
        run: |
          runner_res=$(find . -name "Runner.res");
          if [ "$runner_res" == "" ]; then
            echo "Runner.res: not found";
          else
            echo "Runner.res: $runner_res";
            cp $runner_res ./libs/portable/Runner.res;
            echo "list ./libs/portable/Runner.res";
            ls -l ./libs/portable/Runner.res;
          fi

      - name: Download RustDeskTempTopMostWindow artifacts
        uses: actions/download-artifact@master
        if: ${{ inputs.upload-artifact }}
        with:
          name: topmostwindow-artifacts
          path: "./rustdesk"

      - name: Upload unsigned
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: actions/upload-artifact@master
        with:
          name: rustdesk-unsigned-windows-${{ matrix.job.arch }}
          path: rustdesk

### CUSTOMIZATION LISTEN AND RESOLVE
      - name: Sign Rustdesk files (Azure Trusted Signing)
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          files-folder: ./rustdesk
          files-folder-filter: exe
### CUSTOMIZATION LISTEN AND RESOLVE

      - name: Sign rustdesk files
        if: env.UPLOAD_ARTIFACT == 'true' && env.SIGN_BASE_URL != ''
        shell: bash
        run: |
          pip3 install requests argparse
          BASE_URL=${{ secrets.SIGN_BASE_URL }} SECRET_KEY=${{ secrets.SIGN_SECRET_KEY }} python3 res/job.py sign_files ./rustdesk/

      - name: Build self-extracted executable
        shell: bash
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          sed -i '/dpiAware/d' res/manifest.xml
          pushd ./libs/portable
          pip3 install -r requirements.txt
          python3 ./generate.py -f ../../rustdesk/ -o . -e ../../rustdesk/rustdesk.exe
          popd
          mkdir -p ./SignOutput
          mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ matrix.job.arch }}.exe

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build msi
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          pushd ./res/msi
          python preprocess.py --arp -d ../../rustdesk
          nuget restore msi.sln
          msbuild msi.sln -p:Configuration=Release -p:Platform=x64 /p:TargetVersion=Windows10
          mv ./Package/bin/x64/Release/en-us/Package.msi ../../SignOutput/rustdesk-${{ matrix.job.arch }}.msi
          sha256sum ../../SignOutput/rustdesk-*.msi

### CUSTOMIZATION LISTEN AND RESOLVE
      - name: Sign RustDesk self-extract (Azure Trusted Signing)
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: azure/trusted-signing-action@v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_ENDPOINT }}
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          files-folder: ./SignOutput
          files-folder-filter: exe,msi
### CUSTOMIZATION LISTEN AND RESOLVE

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_ARTIFACT == 'true'
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ./SignOutput/rustdesk-*.msi
            ./SignOutput/rustdesk-*.exe

  build-for-macOS:
    name: ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    needs: [generate-bridge]
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-apple-darwin,
              os: macos-13,
              extra-build-args: "",
              arch: x86_64,
              vcpkg-triplet: x64-osx,
            }
          - {
              target: aarch64-apple-darwin,
              os: macos-13,
              extra-build-args: "--screencapturekit",
              arch: aarch64,
              vcpkg-triplet: arm64-osx,
            }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Import the codesign certs (Application + Installer)
        if: env.MACOS_P12_BASE64 != null
        run: |
          # Cr√©er le keychain une seule fois
          security create-keychain -p actions rustdesk.keychain
          security default-keychain -s rustdesk.keychain
          security unlock-keychain -p actions rustdesk.keychain
          
          # Import certificat Application
          echo "${{ secrets.MACOS_P12_BASE64 }}" | base64 --decode > application.p12
          security import application.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productsign
          
          # Import certificat Installer
          echo "${{ secrets.MACOS_INSTALLER_P12_BASE64 }}" | base64 --decode > installer.p12
          security import installer.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_INSTALLER_P12_PASSWORD }}" -T /usr/bin/productbuild -T /usr/bin/productsign
          
          # Autoriser les outils √† utiliser le keychain sans prompt
          security set-key-partition-list -S apple-tool:,apple: -s -k actions rustdesk.keychain
          
          # Cleanup
          rm -f application.p12 installer.p12
          
          # Debug : lister tous les certificats
          echo "=== Certificats disponibles ==="
          security find-identity -v -p basic rustdesk.keychain
          
      - name: Check sign and import sign key
        if: env.MACOS_P12_BASE64 != null
        run: |
          security default-keychain -s rustdesk.keychain
          security find-identity -v

      - name: Import notarize key
        if: env.MACOS_P12_BASE64 != null
        uses: timheuer/base64-to-file@v1.2
        with:
          # https://gregoryszorc.com/docs/apple-codesign/stable/apple_codesign_rcodesign.html#notarizing-and-stapling
          fileName: rustdesk.json
          fileDir: ${{ github.workspace }}
          encodedString: ${{ secrets.MACOS_NOTARIZE_JSON }}

      - name: Install rcodesign tool
        if: env.MACOS_P12_BASE64 != null
        shell: bash
        run: |
          pushd /tmp
          wget https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-macos-universal.tar.gz
          tar -zxvf apple-codesign-0.22.0-macos-universal.tar.gz
          mv apple-codesign-0.22.0-macos-universal/rcodesign /usr/local/bin
          popd

      - name: Install build runtime
        run: |
          brew install llvm create-dmg nasm
          # pkg-config is handled in a separate step, because it may be already installed by `macos-latest`(14.7.1) runner
          if command -v pkg-config &>/dev/null; then
              echo "pkg-config is already installed"
          else
              brew install pkg-config
          fi

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Patch flutter
        run: |
          cd $(dirname $(dirname $(which flutter)))
          [[ "3.24.5" == ${{env.FLUTTER_VERSION}} ]] && git apply ${{ github.workspace }}/.github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff

      - name: Workaround for flutter issue
        shell: bash
        run: |
          cd "$(dirname "$(which flutter)")"
          # https://github.com/flutter/flutter/issues/133533
          sed -i -e 's/_setFramesEnabledState(false);/\/\/_setFramesEnabledState(false);/g' ../packages/flutter/lib/src/scheduler/binding.dart
          grep -n '_setFramesEnabledState(false);' ../packages/flutter/lib/src/scheduler/binding.dart

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.MAC_RUST_VERSION }}
          targets: ${{ matrix.job.target }}
          components: "rustfmt"

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Restore bridge files
        uses: actions/download-artifact@master
        with:
          name: bridge-artifact
          path: ./

#=====# CUSTOMIZATION LISTEN AND RESOLVE (macOS)
      - name: CUSTOMIZATION CLIENT LISTEN AND RESOLVE (macOS)
        env:
          RENDEZVOUS_SERVER: "${{ secrets.RENDEZVOUS_SERVER }}"
          API_SERVER: "${{ secrets.API_SERVER }}"
          RS_PUB_KEY: ${{ secrets.RS_PUB_KEY }}
          RS_PWD: ${{ secrets.RS_PWD }}
        shell: bash
        run: |
          # ========================================
          # Pr√©paration des ressources...
          echo -n "üü† Pr√©paration des ressources..."
          brew install imagemagick
          echo "$(brew --prefix imagemagick)/bin" >> $GITHUB_PATH
          # Create all necessary directories first
          mkdir -p ./res
          mkdir -p ./flutter/macos/Runner/Assets.xcassets/AppIcon.appiconset
          mkdir -p ./macos/Runner/Assets.xcassets/AppIcon.appiconset
          mkdir -p ./flutter/assets
          mkdir -p ./rustdesk/data/flutter_assets/assets
          echo -e "\rüü¢ Pr√©paration des ressources... OK"
          
          # ========================================
          # T√©l√©chargement des ressources
          echo -n "üü† T√©l√©chargement des ressources..."
          # T√©l√©charger l'ic√¥ne .icns
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./flutter/macos/Runner/AppIcon.icns \
            https://listenandresolve.com/rustdesk/AppIcon.icns; then
            wget --no-check-certificate -O ./flutter/macos/Runner/AppIcon.icns \
              https://listenandresolve.com/rustdesk/AppIcon.icns || echo "‚ö†Ô∏è  √âchec t√©l√©chargement ICNS"
          fi
          
          # T√©l√©charger le PNG avec options SSL
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./res/icon.png \
            https://listenandresolve.com/rustdesk/icon.png; then
            wget --no-check-certificate -O ./res/icon.png \
              https://listenandresolve.com/rustdesk/icon.png || echo "‚ö†Ô∏è  √âchec t√©l√©chargement PNG"
          fi
          # T√©l√©charger le logo placeholder
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./flutter/assets/logo.png \
            https://listenandresolve.com/rustdesk/logo.png; then
            wget --no-check-certificate -O ./flutter/assets/logo.png \
              https://listenandresolve.com/rustdesk/icon.png || echo "‚ö†Ô∏è  √âchec t√©l√©chargement PNG"
          fi
          # T√©l√©charger le background create dmg
          if ! curl -k -L --tlsv1.2 --proto =https --ssl-reqd \
            -H "User-Agent: Mozilla/5.0" \
            -o ./background.tiff \
            https://listenandresolve.com/rustdesk/background.tiff; then
            wget --no-check-certificate -O ./flutter/build/macos/Build/Products/Release/background.tiff \
              https://listenandresolve.com/rustdesk/background.tiff || echo "‚ö†Ô∏è  √âchec t√©l√©chargement PNG"
          fi
          echo -e "\rüü¢ T√©l√©chargement des ressources... OK"
          echo "_____"

          # ========================================
          # Cr√©er toutes les tailles d'ic√¥nes n√©cessaires
          echo -n "üü† Cr√©ation des icones..."
          # Copier l'ic√¥ne .icns aux deux emplacements
          cp ./flutter/macos/Runner/AppIcon.icns ./macos/Runner/AppIcon.icns

          # Modification de l'icone base64
          SEARCH_STR="iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAEiuAABIrgHwmhA7AAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAEx9JREFUeJztnXmYHMV5h9"
          b64=$(base64 < ./res/icon.png | tr -d '\n')
          sed -i '' -e "s~$SEARCH_STR.*\"~$b64\"~" ./src/ui.rs

          # Verify files exist and show their sizes
          echo "!!! VERIFICATION DES FICHIERS:"
          ls -lh ./res/mac-tray-dark-x2.png
          ls -lh ./res/mac-tray-light-x2.png
          ls -lh ./res/mac-icon.png
          
          echo -e "\rüü¢ Cr√©ation des icones... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Modification de flutter/lib/common.dart
          echo -n "üü† Ajout du logo..."
          # Cr√©ation d'un fichier temporaire contenant le nouveau code
          cat > /tmp/new_logo_function.txt << 'EOF'
          Widget loadLogo() {
            return Container(
              width: 300,
              height: 100,
              margin: EdgeInsets.only(left: 12, right: 12, top: 12),
              child: FadeInImage.assetNetwork(
                placeholder: 'assets/logo.png', // Placeholder image while loading
                image: 'https://listenandresolve.com/rustdesk/client.gif', // URL of the logo
                fit: BoxFit.contain,
                imageErrorBuilder: (context, error, stackTrace) {
                  return Image.asset('assets/icon.png', fit: BoxFit.contain); // Fallback to local asset
                },
              ),
            );
          }
          EOF
          
          # Suppression de l'ancienne fonction et insertion de la nouvelle
          if [ -f "./flutter/lib/common.dart" ]; then
            awk '
            BEGIN { printing = 1 }
            /Widget loadLogo\(\) \{/ { printing = 0; system("cat /tmp/new_logo_function.txt"); }
            /^}$/ && printing == 0 { printing = 1; next; }
            printing == 1 { print }
            ' flutter/lib/common.dart > flutter/lib/common.dart.new
            
            # Remplacement du fichier original
            mv flutter/lib/common.dart.new flutter/lib/common.dart
          fi
          echo -e "\rüü¢ Ajout du logo... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Ajout du bouton d'installation daemon + ID rouge
          echo -n "üü† Cr√©ation du bouton d'installation..."
          
          # Cr√©ation du fichier temporaire avec la nouvelle m√©thode buildDaemonInstallButton
          cat > /tmp/daemon_button_method.txt << 'EOF'
            Widget LNRDaemonInstallButton(BuildContext context) {
              final textColor = Theme.of(context).textTheme.titleLarge?.color;
              RxBool hover = false.obs;
              return InkWell(
                onTap: () async {
                  // Action directe sans v√©rification
                  bind.mainIsInstalledDaemon(prompt: true);
                },
                child: Tooltip(
                  message: translate('Installer sur le Mac'),
                  child: Obx(
                    () => CircleAvatar(
                      radius: 15,
                      backgroundColor: hover.value
                          ? Theme.of(context).scaffoldBackgroundColor
                          : Theme.of(context).colorScheme.background,
                      child: Icon(
                        Icons.install_desktop,
                        size: 18,
                        color: hover.value 
                            ? textColor 
                            : textColor?.withOpacity(0.5),
                      ),
                    ),
                  ),
                ),
                onHover: (value) => hover.value = value,
              );
            }
          EOF
          
          # Ajout de la m√©thode buildDaemonInstallButton apr√®s buildPopupMenu
          awk '
          /Widget buildPopupMenu\(BuildContext context\) \{/,/^  \}$/ {
              print
              if (/^  \}$/) {
                  system("cat /tmp/daemon_button_method.txt")
              }
              next
          } { print }
          ' flutter/lib/desktop/pages/desktop_home_page.dart > /tmp/desktop_home_page_temp.dart
          
          # Remplacement de buildPopupMenu(context) par le Row avec les deux boutons dans buildIDBoard
          sed -i '' 's/buildPopupMenu(context)/Row(\
                                    mainAxisSize: MainAxisSize.min,\
                                    children: [\
                                      LNRDaemonInstallButton(context),\
                                      SizedBox(width: 0),\
                                      buildPopupMenu(context),\
                                    ],\
                                  )/g' /tmp/desktop_home_page_temp.dart
          
          # Modification du style de l'ID
          sed -i '' 's/fontSize: 22,/fontSize: 24,\
                          color: Colors.red,/g' /tmp/desktop_home_page_temp.dart
          
          # Remplacement du fichier original
          mv /tmp/desktop_home_page_temp.dart flutter/lib/desktop/pages/desktop_home_page.dart
          
          # Nettoyage des fichiers temporaires
          rm -f /tmp/daemon_button_method.txt /tmp/new_logo_function.txt
          
          echo -e "\rüü¢ Cr√©ation du bouton d'installation... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier libs/hbb_common/src/config.rs
          echo -n "üü† Configuration du serveur..."
          if [ -f "./libs/hbb_common/src/config.rs" ]; then
            sed -i '' -e "s|rs-ny.rustdesk.com|${RENDEZVOUS_SERVER}|g" ./libs/hbb_common/src/config.rs
            sed -i '' -e "s|OeVuKk5nlHiXp+APNn0Y3pC1Iwpwn44JGqrQCsWqmBw=|${RS_PUB_KEY}|g" ./libs/hbb_common/src/config.rs
          fi
          echo -e "\rüü¢ Configuration du serveur... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Overwrite Settings..."
          if [ -f "./libs/hbb_common/src/config.rs" ]; then
            cat << 'EOF' > /tmp/overwritesettings.txt
              pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("api-server".to_string(), "https://rd.listenandresolve.com".to_string());
                  m.insert("access-mode".to_string(), "full".to_string());
                  m.insert("allow-remote-config-modification".to_string(), "Y".to_string());
                  m.insert("allow-remove-wallpaper".to_string(), "Y".to_string());
                  m.insert("allow-remote-cm-modification".to_string(), "Y".to_string());
                  m.insert("allow-numeric-one-time-password".to_string(), "Y".to_string());
                  m.insert("allow-websocket".to_string(), "Y".to_string());
                  m.insert("enable-remote-restart".to_string(), "Y".to_string());
                  m.insert("enable-file-copy-paste".to_string(), "Y".to_string());
                  m.insert("enable-remote-printer".to_string(), "N".to_string());
                  RwLock::new(m)
              };
          EOF
            
            sed -i '' '/pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r /tmp/overwritesettings.txt' ./libs/hbb_common/src/config.rs
            sed -i '' '/pub static ref OVERWRITE_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          fi
          echo -e "\rüü¢ Configuration des Overwrite Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Builtin Settings..."
          if [ -f "./libs/hbb_common/src/config.rs" ]; then
            cat << 'EOF' > /tmp/builtinsettings.txt
              pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("allow-logon-screen-password".to_string(), "Y".to_string());
                  m.insert("allow-https-21114".to_string(), "Y".to_string());
                  m.insert("hide-help-cards".to_string(), "Y".to_string());
                  RwLock::new(m)
              };
          EOF
            
            sed -i '' '/pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r /tmp/builtinsettings.txt' ./libs/hbb_common/src/config.rs
            sed -i '' '/pub static ref BUILTIN_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          fi
          echo -e "\rüü¢ Configuration des Builtin Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le fichier config.rs
          echo -n "üü† Configuration des Hard Settings..."
          if [ -f "./src/lang/en.rs" ]; then
            sed -i '' 's/"doc_mac_permission", ".*"/"doc_mac_permission", "https:\/\/listenandresolve.com\/rustdesk"/' src/lang/en.rs
          fi
          if [ -f "./libs/hbb_common/src/config.rs" ]; then
            cat << 'EOF' > /tmp/hardsettings.txt
              pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = {
                  let mut m = HashMap::new();
                  m.insert("conn-type".to_string(), "incoming".to_string());
                  m.insert("force-always-relay".to_string(), "Y".to_string());
                  m.insert("disable-settings".to_string(), "Y".to_string());
                  m.insert("disable-account".to_string(), "Y".to_string());
                  m.insert("disable-installation".to_string(), "Y".to_string());
                  m.insert("password".to_string(), "__PASSWORD_PLACEHOLDER__".to_string());
                  RwLock::new(m)
              };
          EOF
            sed -i '' "s/__PASSWORD_PLACEHOLDER__/${RS_PWD}/g" /tmp/hardsettings.txt
            sed -i '' '/pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/r /tmp/hardsettings.txt' ./libs/hbb_common/src/config.rs
            sed -i '' '/pub static ref HARD_SETTINGS: RwLock<HashMap<String, String>> = Default::default();/d' ./libs/hbb_common/src/config.rs
          fi
          echo -e "\rüü¢ Configuration des Hard Settings... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier le nom de l'entreprise
          echo -n "üü† Configuration entreprise..."
          # Modifier le bundle id
          sed -i '' 's|com.carriez|com.listenandresolve|' ./libs/hbb_common/src/config.rs 
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./Cargo.toml
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./flutter/macos/Runner/Info.plist
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./flutter/macos/Runner/Configs/AppInfo.xcconfig
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./flutter/macos/Runner.xcodeproj/project.pbxproj
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/macos.rs
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/privileges_scripts/agent.plist
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/privileges_scripts/daemon.plist
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/privileges_scripts/install.scpt
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/privileges_scripts/uninstall.scpt
          sed -i '' 's|com.carriez.|com.listenandresolve.|' ./src/platform/privileges_scripts/update.scpt

          echo -e "\rüü¢ Configuration entreprise... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Modifier les URL
          echo -n "üü† Configuration des URL..."
          [ -f "./build.py" ] && sed -i '' -e "s|Homepage: https://rustdesk.com|Homepage: https://listenandresolve.com|" ./build.py
          [ -f "./flutter/lib/common.dart" ] && sed -i '' -e "s|launchUrl(Uri.parse('https://rustdesk.com'));|launchUrl(Uri.parse('https://listenandresolve.com'));|" ./flutter/lib/common.dart
          [ -f "./flutter/lib/desktop/pages/desktop_setting_page.dart" ] && sed -i '' -e "s|launchUrlString('https://rustdesk.com');|launchUrlString('https://listenandresolve.com');|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          [ -f "./flutter/lib/desktop/pages/desktop_setting_page.dart" ] && sed -i '' -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('https://listenandresolve.com/rustdesk')|" ./flutter/lib/desktop/pages/desktop_setting_page.dart
          [ -f "./flutter/lib/mobile/pages/settings_page.dart" ] && sed -i '' -e "s|const url = 'https://rustdesk.com/';|const url = 'https://listenandresolve.com';|" ./flutter/lib/mobile/pages/settings_page.dart
          [ -f "./flutter/lib/mobile/pages/settings_page.dart" ] && sed -i '' -e "s|launchUrlString('https://rustdesk.com/privacy.html')|launchUrlString('https://listenandresolve.com/rustdesk')|" ./flutter/lib/mobile/pages/settings_page.dart
          [ -f "./flutter/lib/desktop/pages/install_page.dart" ] && sed -i '' -e "s|https://rustdesk.com/privacy.html|https://listenandresolve.com/rustdesk|" ./flutter/lib/desktop/pages/install_page.dart
          echo -e "\rüü¢ Configuration des URL... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"

          # ========================================
          # Nettoyage final
          echo -n "üü† Nettoyage des fichiers temporaires..."
          rm -f /tmp/overwritesettings.txt /tmp/builtinsettings.txt /tmp/hardsettings.txt
          echo -e "\rüü¢ Nettoyage termin√©... OK"
          echo "‚Äî‚Äî‚Äî‚Äî‚Äî"
          
          echo "üü¢ Customisation termin√©e avec succ√®s!"
#=====# CUSTOMIZATION LISTEN AND RESOLVE

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
          doNotCache: false

      - name: Install vcpkg dependencies
        run: |
          if ! $VCPKG_ROOT/vcpkg \
            install \
            --x-install-root="$VCPKG_ROOT/installed"; then
            find "${VCPKG_ROOT}/" -name "*.log" | while read -r _1; do
              echo "$_1:"
              echo "======"
              cat "$_1"
              echo "======"
              echo ""
            done
            exit 1
          fi
          head -n 100 "${VCPKG_ROOT}/buildtrees/ffmpeg/build-${{ matrix.job.vcpkg-triplet }}-rel-out.log" || true

      - name: Show version information (Rust, cargo, Clang)
        shell: bash
        run: |
          clang --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build rustdesk
        run: |
          if [ "${{ matrix.job.target }}" = "aarch64-apple-darwin" ]; then
            MIN_MACOS_VERSION="12.3"
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET\=[0-9]*.[0-9]*/MACOSX_DEPLOYMENT_TARGET=${MIN_MACOS_VERSION}/" build.py
            sed -i -e "s/platform :osx, '.*'/platform :osx, '${MIN_MACOS_VERSION}'/" flutter/macos/Podfile
            sed -i -e "s/osx_minimum_system_version = \"[0-9]*.[0-9]*\"/osx_minimum_system_version = \"${MIN_MACOS_VERSION}\"/" Cargo.toml
            sed -i -e "s/MACOSX_DEPLOYMENT_TARGET = [0-9]*.[0-9]*;/MACOSX_DEPLOYMENT_TARGET = ${MIN_MACOS_VERSION};/" flutter/macos/Runner.xcodeproj/project.pbxproj
          fi
          ./build.py --flutter --hwcodec --unix-file-copy-paste ${{ matrix.job.extra-build-args }}

#=====# CUSTOM LISTEN AND RESOLVE
      - name: Create PKG
        if: env.MACOS_INSTALLER_P12_BASE64 != null && env.UPLOAD_ARTIFACT == 'true'
        shell: bash
        run: |
          echo "=== Recreate Keychain ==="
          security delete-keychain rustdesk.keychain || true
          security create-keychain -p actions rustdesk.keychain
          security default-keychain -s rustdesk.keychain
          security unlock-keychain -p actions rustdesk.keychain
          security set-keychain-settings -t 3600 -u rustdesk.keychain
          
          echo "=== Import Certificates ==="
          echo "${{ secrets.MACOS_P12_BASE64 }}" | base64 --decode > application.p12
          security import application.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign
          
          echo "${{ secrets.MACOS_INSTALLER_P12_BASE64 }}" | base64 --decode > installer.p12
          security import installer.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_INSTALLER_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign
          
          security set-key-partition-list -S apple-tool:,apple: -s -k actions rustdesk.keychain
          rm -f application.p12 installer.p12
          
          echo "=== List Identities ==="
          security find-identity -v -p basic rustdesk.keychain
          
          echo "=== Sign App ==="
          codesign --force --options runtime --deep --sign "Developer ID Application: LISTEN AND RESOLVE" "./flutter/build/macos/Build/Products/Release/RustDesk.app" -v
          
          echo "=== Verify Signing ==="
          codesign -vvv --deep --strict "./flutter/build/macos/Build/Products/Release/RustDesk.app"
          
          echo "=== Create Component PKG ==="
          pkgbuild --component "./flutter/build/macos/Build/Products/Release/RustDesk.app" \
                   --install-location /Applications \
                   --sign "Developer ID Installer: LISTEN AND RESOLVE" \
                   RustDesk-component.pkg
          
          echo "=== Create Final PKG ==="
          productbuild --package RustDesk-component.pkg \
                       --sign "Developer ID Installer: LISTEN AND RESOLVE" \
                       rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.pkg
          
          echo "=== Verify PKG Signature ==="
          pkgutil --check-signature rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.pkg

    - name: Create signed DMG and PKG
      if: env.MACOS_P12_BASE64 != null && env.UPLOAD_ARTIFACT == 'true'
      shell: bash
      run: |
        APP_PATH="./flutter/build/macos/Build/Products/Release/RustDesk.app"
        DMG_NAME="rustdesk-${{ matrix.job.arch }}.dmg"
        
        echo "=== Recreate Keychain ==="
        security delete-keychain rustdesk.keychain || true
        security create-keychain -p actions rustdesk.keychain
        security default-keychain -s rustdesk.keychain
        security unlock-keychain -p actions rustdesk.keychain
        security set-keychain-settings -t 3600 -u rustdesk.keychain
        
        echo "=== Import Certificates ==="
        echo "${{ secrets.MACOS_P12_BASE64 }}" | base64 --decode > application.p12
        security import application.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign
        
        echo "${{ secrets.MACOS_INSTALLER_P12_BASE64 }}" | base64 --decode > installer.p12
        security import installer.p12 -k rustdesk.keychain -P "${{ secrets.MACOS_INSTALLER_P12_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild -T /usr/bin/productsign
        
        security set-key-partition-list -S apple-tool:,apple: -s -k actions rustdesk.keychain
        rm -f application.p12 installer.p12
        
        echo "=== List Identities ==="
        security find-identity -v -p basic rustdesk.keychain
        
        echo "=== Sign Frameworks ==="
        if [ -d "$APP_PATH/Contents/Frameworks" ]; then
          find "$APP_PATH/Contents/Frameworks" -type f \( -name "*.framework" -o -name "*.dylib" \) -exec \
            codesign --force --options runtime -s "Developer ID Application: LISTEN AND RESOLVE" --timestamp --deep {} \;
        fi
        
        echo "=== Sign App Bundle ==="
        codesign --force --options runtime -s "Developer ID Application: LISTEN AND RESOLVE" --timestamp --deep --strict "$APP_PATH" -vvv
        
        echo "=== Verify App Signature ==="
        codesign -vvv --deep --strict "$APP_PATH"
        
        echo "=== Create DMG ==="
        create-dmg \
          --volname "RustDesk ${{ env.VERSION }}" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "RustDesk.app" 200 190 \
          --hide-extension "RustDesk.app" \
          --app-drop-link 600 185 \
          "$DMG_NAME" \
          "$APP_PATH"
        
        echo "=== Sign DMG ==="
        codesign --force --sign "Developer ID Application: LISTEN AND RESOLVE" "$DMG_NAME"
        
        echo "=== Notarize DMG ==="
        rcodesign notary-submit --api-key-path ${{ github.workspace }}/rustdesk.json --staple "$DMG_NAME"
        
        echo "=== Create Component PKG ==="
        pkgbuild --component "$APP_PATH" \
                 --install-location /Applications \
                 --sign "Developer ID Installer: LISTEN AND RESOLVE" \
                 RustDesk-component.pkg
        
        echo "=== Create Final PKG ==="
        productbuild --package RustDesk-component.pkg \
                     --sign "Developer ID Installer: LISTEN AND RESOLVE" \
                     rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.pkg
        
        echo "=== Verify PKG Signature ==="
        pkgutil --check-signature rustdesk-${{ env.VERSION }}-${{ matrix.job.arch }}.pkg

#=====# CUSTOM LISTEN AND RESOLVE

      - name: Publish DMG and PKG
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            rustdesk*-${{ matrix.job.arch }}.dmg
            rustdesk*-${{ matrix.job.arch }}.pkg
